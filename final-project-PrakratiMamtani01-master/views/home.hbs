{{#if timer}}
<div class="timer">
    <h3>You can submit again in:</h3>
    <p id="timer-display"></p>
</div>
{{/if}}

<div id="home">

    <form method="GET" action="/home/add">
        <button type="submit">Add Item</button>
    </form>

    <div class="jar">
        <img src="/imgs/jar.png" alt="A Jar of Happiness" style="width: 100%; height: 100%; object-fit: cover;">
    </div>

    {{#if timer}}
    {{!-- <div class="timer">
        <h3>You can submit again in:</h3>
        <p id="timer-display"></p>
    </div> --}}
    {{else}}
    <form method="POST" action="" class="open-jar-form">
        <fieldset>
            <legend>How are you feeling today?</legend>

            <input type="radio" id="excited" name="mood" value="excited">
            <label for="excited">Excited</label><br>

            <input type="radio" id="angry" name="mood" value="angry">
            <label for="angry">Angry</label><br>

            <input type="radio" id="stressed" name="mood" value="stressed">
            <label for="stressed">Stressed</label><br>

            <input type="radio" id="happy" name="mood" value="happy">
            <label for="happy">Happy</label>

            <div><input type="submit" value="Open!"></div>

            {{#if message}}
            <div class="error">{{ message }}</div>
            {{/if}}

        </fieldset>

    </form>
    {{/if}}

</div>


{{#if item}}
<div id="note">
    <h1>{{item.content}}</h1>
    <p>by: {{item.author}}</p>
    <button id="close-note">Close</button>
</div>
{{/if}}

<script>
    document.addEventListener('DOMContentLoaded', () => {

        const closeButton = document.getElementById('close-note');
        const noteElement = document.getElementById('note');
        const timerDisplay = document.getElementById('timer-display');

        if (closeButton && timerDisplay) {
            closeButton.addEventListener('click', () => {
                noteElement.style.display = 'none'; // Hide the note element
                setupTimer(timerDisplay)
            });
        } else {
            if (timerDisplay) {
                setupTimer(timerDisplay)
            }
        }

    });

    async function setupTimer(timerDisplay) {
        try {
            // Fetch user data from the server
            const response = await fetch('/api/user-data');

            if (!response.ok) {
                throw new Error('Failed to fetch user data');
            }


            const userData = await response.json();

            // Use the fetched data in your script

            const lastTime = new Date(userData.lastSubmission);
            const now = new Date();
            const diff = now - lastTime;

            // startTimer(24 * 60 * 60 * 1000 - diff, timerDisplay);
            console.log(timerDisplay);
            startTimer(24 * 60 * 60 * 1000 - diff, timerDisplay);
        } catch (error) {
            console.error('Error fetching user data:', error);
        }
    }


    function startTimer(remainingTime, timerDisplay) {
        const interval = setInterval(() => {
            const hours = Math.floor(remainingTime / (60 * 60 * 1000));
            const minutes = Math.floor((remainingTime % (60 * 60 * 1000)) / (60 * 1000));
            const seconds = Math.floor((remainingTime % (60 * 1000)) / 1000);

            timerDisplay.textContent = `${hours}h ${minutes}m ${seconds}s`;

            if (remainingTime <= 0) {
                clearInterval(interval);
                window.location.href = '/home';
                return;
            } else {
                remainingTime -= 1000;
            }
        }, 1000);
    }

</script>